// Secret Admin Tools for PolyPredict
// This file contains admin-only functionality for managing bets and markets

// Global state for admin tools
const adminToolsState = {
    secretMode: false,
    autoGeneratedBets: {}
};

// Initialize admin tools
function initAdminTools() {
    // Check if user is admin
    const currentUser = JSON.parse(sessionStorage.getItem('currentUser'));
    if (!currentUser || !currentUser.isAdmin) {
        return; // Only initialize for admin users
    }
    
    console.log('Initializing admin tools...');
    
    // Add secret admin panel toggle to admin page
    addSecretAdminToggle();
    
    // Add secret admin panel to markets page if on dashboard
    if (window.location.href.includes('dashboard.html')) {
        addSecretMarketControls();
    }
}

// Add secret admin toggle button
function addSecretAdminToggle() {
    // Check if already added
    if (document.getElementById('secret-admin-toggle')) {
        return;
    }
    
    // Create toggle button
    const toggleBtn = document.createElement('button');
    toggleBtn.id = 'secret-admin-toggle';
    toggleBtn.innerHTML = '<i class="fas fa-user-secret"></i>';
    toggleBtn.style.position = 'fixed';
    toggleBtn.style.bottom = '20px';
    toggleBtn.style.right = '20px';
    toggleBtn.style.width = '50px';
    toggleBtn.style.height = '50px';
    toggleBtn.style.borderRadius = '50%';
    toggleBtn.style.backgroundColor = '#2d3436';
    toggleBtn.style.color = 'white';
    toggleBtn.style.border = 'none';
    toggleBtn.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
    toggleBtn.style.cursor = 'pointer';
    toggleBtn.style.zIndex = '1000';
    toggleBtn.style.opacity = '0.7';
    toggleBtn.style.transition = 'all 0.3s ease';
    
    // Add hover effect
    toggleBtn.addEventListener('mouseover', function() {
        this.style.opacity = '1';
        this.style.transform = 'scale(1.1)';
    });
    
    toggleBtn.addEventListener('mouseout', function() {
        this.style.opacity = '0.7';
        this.style.transform = 'scale(1)';
    });
    
    // Add click event
    toggleBtn.addEventListener('click', function() {
        toggleSecretAdminMode();
    });
    
    // Add to body
    document.body.appendChild(toggleBtn);
}

// Toggle secret admin mode
function toggleSecretAdminMode() {
    adminToolsState.secretMode = !adminToolsState.secretMode;
    
    // Update toggle button
    const toggleBtn = document.getElementById('secret-admin-toggle');
    if (adminToolsState.secretMode) {
        toggleBtn.style.backgroundColor = '#e74c3c';
        toggleBtn.innerHTML = '<i class="fas fa-times"></i>';
        
        // Show secret admin panel
        showSecretAdminPanel();
    } else {
        toggleBtn.style.backgroundColor = '#2d3436';
        toggleBtn.innerHTML = '<i class="fas fa-user-secret"></i>';
        
        // Hide secret admin panel
        hideSecretAdminPanel();
    }
}

// Show secret admin panel
function showSecretAdminPanel() {
    // Check if panel already exists
    if (document.getElementById('secret-admin-panel')) {
        document.getElementById('secret-admin-panel').style.display = 'block';
        return;
    }
    
    // Create panel
    const panel = document.createElement('div');
    panel.id = 'secret-admin-panel';
    panel.style.position = 'fixed';
    panel.style.bottom = '80px';
    panel.style.right = '20px';
    panel.style.width = '350px';
    panel.style.backgroundColor = 'white';
    panel.style.borderRadius = '10px';
    panel.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
    panel.style.padding = '20px';
    panel.style.zIndex = '999';
    panel.style.maxHeight = '80vh';
    panel.style.overflowY = 'auto';
    
    // Add panel header
    const header = document.createElement('div');
    header.style.borderBottom = '1px solid #eee';
    header.style.paddingBottom = '10px';
    header.style.marginBottom = '15px';
    header.style.display = 'flex';
    header.style.justifyContent = 'space-between';
    header.style.alignItems = 'center';
    
    const title = document.createElement('h3');
    title.textContent = 'Secret Admin Tools';
    title.style.margin = '0';
    title.style.color = '#e74c3c';
    
    header.appendChild(title);
    panel.appendChild(header);
    
    // Add panel content based on current page
    if (window.location.href.includes('dashboard.html')) {
        addMarketManipulationTools(panel);
    } else if (window.location.href.includes('admin.html')) {
        addAdminPageTools(panel);
    } else {
        // Generic admin tools
        const message = document.createElement('p');
        message.textContent = 'Secret admin tools are available on the dashboard and admin pages.';
        panel.appendChild(message);
    }
    
    // Add to body
    document.body.appendChild(panel);
}

// Hide secret admin panel
function hideSecretAdminPanel() {
    const panel = document.getElementById('secret-admin-panel');
    if (panel) {
        panel.style.display = 'none';
    }
}

// Add market manipulation tools to panel
function addMarketManipulationTools(panel) {
    // Add section title
    const sectionTitle = document.createElement('h4');
    sectionTitle.textContent = 'Market Manipulation';
    sectionTitle.style.marginTop = '0';
    panel.appendChild(sectionTitle);
    
    // Add market selector
    const marketSelector = document.createElement('select');
    marketSelector.id = 'admin-market-selector';
    marketSelector.style.width = '100%';
    marketSelector.style.padding = '8px';
    marketSelector.style.marginBottom = '15px';
    marketSelector.style.borderRadius = '5px';
    marketSelector.style.border = '1px solid #ddd';
    
    // Add default option
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.textContent = 'Select a market';
    marketSelector.appendChild(defaultOption);
    
    // Get all markets from the page
    const marketCards = document.querySelectorAll('.market-card');
    marketCards.forEach((card, index) => {
        const marketTitle = card.querySelector('.market-title').textContent;
        const option = document.createElement('option');
        option.value = index + 1; // Market ID
        option.textContent = marketTitle;
        marketSelector.appendChild(option);
    });
    
    panel.appendChild(marketSelector);
    
    // Add auto-generate bets section
    const autoGenSection = document.createElement('div');
    autoGenSection.style.marginBottom = '20px';
    autoGenSection.style.padding = '15px';
    autoGenSection.style.backgroundColor = '#f8f9fa';
    autoGenSection.style.borderRadius = '5px';
    autoGenSection.style.border = '1px solid #eee';
    
    const autoGenTitle = document.createElement('h5');
    autoGenTitle.textContent = 'Auto-Generate Bets';
    autoGenTitle.style.marginTop = '0';
    autoGenSection.appendChild(autoGenTitle);
    
    // Add outcome selector
    const outcomeLabel = document.createElement('label');
    outcomeLabel.textContent = 'Select Outcome:';
    outcomeLabel.style.display = 'block';
    outcomeLabel.style.marginBottom = '5px';
    autoGenSection.appendChild(outcomeLabel);
    
    const outcomeSelector = document.createElement('select');
    outcomeSelector.id = 'admin-outcome-selector';
    outcomeSelector.style.width = '100%';
    outcomeSelector.style.padding = '8px';
    outcomeSelector.style.marginBottom = '15px';
    outcomeSelector.style.borderRadius = '5px';
    outcomeSelector.style.border = '1px solid #ddd';
    
    // Add default option
    const defaultOutcomeOption = document.createElement('option');
    defaultOutcomeOption.value = '';
    defaultOutcomeOption.textContent = 'Select an outcome';
    outcomeSelector.appendChild(defaultOutcomeOption);
    
    autoGenSection.appendChild(outcomeSelector);
    
    // Add number of bets input
    const betsLabel = document.createElement('label');
    betsLabel.textContent = 'Number of Bets:';
    betsLabel.style.display = 'block';
    betsLabel.style.marginBottom = '5px';
    autoGenSection.appendChild(betsLabel);
    
    const betsInput = document.createElement('input');
    betsInput.type = 'number';
    betsInput.id = 'admin-bets-count';
    betsInput.min = '1';
    betsInput.max = '100';
    betsInput.value = '5';
    betsInput.style.width = '100%';
    betsInput.style.padding = '8px';
    betsInput.style.marginBottom = '15px';
    betsInput.style.borderRadius = '5px';
    betsInput.style.border = '1px solid #ddd';
    autoGenSection.appendChild(betsInput);
    
    // Add generate button
    const generateBtn = document.createElement('button');
    generateBtn.textContent = 'Generate Bets';
    generateBtn.className = 'btn btn-primary';
    generateBtn.style.width = '100%';
    generateBtn.style.backgroundColor = '#e74c3c';
    generateBtn.style.border = 'none';
    
    generateBtn.addEventListener('click', function() {
        generateSecretBets();
    });
    
    autoGenSection.appendChild(generateBtn);
    
    panel.appendChild(autoGenSection);
    
    // Add resolve market section
    const resolveSection = document.createElement('div');
    resolveSection.style.marginBottom = '20px';
    resolveSection.style.padding = '15px';
    resolveSection.style.backgroundColor = '#f8f9fa';
    resolveSection.style.borderRadius = '5px';
    resolveSection.style.border = '1px solid #eee';
    
    const resolveTitle = document.createElement('h5');
    resolveTitle.textContent = 'Resolve Market';
    resolveTitle.style.marginTop = '0';
    resolveSection.appendChild(resolveTitle);
    
    // Add winning outcome selector
    const winningLabel = document.createElement('label');
    winningLabel.textContent = 'Winning Outcome:';
    winningLabel.style.display = 'block';
    winningLabel.style.marginBottom = '5px';
    resolveSection.appendChild(winningLabel);
    
    const winningSelector = document.createElement('select');
    winningSelector.id = 'admin-winning-selector';
    winningSelector.style.width = '100%';
    winningSelector.style.padding = '8px';
    winningSelector.style.marginBottom = '15px';
    winningSelector.style.borderRadius = '5px';
    winningSelector.style.border = '1px solid #ddd';
    
    // Add default option
    const defaultWinningOption = document.createElement('option');
    defaultWinningOption.value = '';
    defaultWinningOption.textContent = 'Select winning outcome';
    winningSelector.appendChild(defaultWinningOption);
    
    resolveSection.appendChild(winningSelector);
    
    // Add resolve button
    const resolveBtn = document.createElement('button');
    resolveBtn.textContent = 'Resolve Market';
    resolveBtn.className = 'btn btn-primary';
    resolveBtn.style.width = '100%';
    resolveBtn.style.backgroundColor = '#e74c3c';
    resolveBtn.style.border = 'none';
    
    resolveBtn.addEventListener('click', function() {
        resolveMarketSecretly();
    });
    
    resolveSection.appendChild(resolveBtn);
    
    panel.appendChild(resolveSection);
    
    // Add status section
    const statusSection = document.createElement('div');
    statusSection.id = 'admin-status-section';
    statusSection.style.marginTop = '15px';
    statusSection.style.padding = '10px';
    statusSection.style.backgroundColor = '#f8f9fa';
    statusSection.style.borderRadius = '5px';
    statusSection.style.border = '1px solid #eee';
    statusSection.style.display = 'none';
    
    panel.appendChild(statusSection);
    
    // Add event listener to market selector
    marketSelector.addEventListener('change', function() {
        updateOutcomeOptions(this.value);
    });
}

// Update outcome options based on selected market
function updateOutcomeOptions(marketId) {
    if (!marketId) return;
    
    // Clear existing options
    const outcomeSelector = document.getElementById('admin-outcome-selector');
    const winningSelector = document.getElementById('admin-winning-selector');
    
    outcomeSelector.innerHTML = '<option value="">Select an outcome</option>';
    winningSelector.innerHTML = '<option value="">Select winning outcome</option>';
    
    // Get market card
    const marketCards = document.querySelectorAll('.market-card');
    const marketCard = marketCards[marketId - 1];
    
    if (!marketCard) return;
    
    // Get outcomes
    const outcomes = marketCard.querySelectorAll('.outcome');
    
    outcomes.forEach(outcome => {
        const outcomeName = outcome.querySelector('.outcome-name').textContent.split('(')[0].trim();
        
        // Add to outcome selector
        const outcomeOption = document.createElement('option');
        outcomeOption.value = outcomeName;
        outcomeOption.textContent = outcomeName;
        outcomeSelector.appendChild(outcomeOption);
        
        // Add to winning selector
        const winningOption = document.createElement('option');
        winningOption.value = outcomeName;
        winningOption.textContent = outcomeName;
        winningSelector.appendChild(winningOption);
    });
}

// Generate secret bets
function generateSecretBets() {
    const marketId = document.getElementById('admin-market-selector').value;
    const outcome = document.getElementById('admin-outcome-selector').value;
    const betCount = parseInt(document.getElementById('admin-bets-count').value);
    
    if (!marketId || !outcome || isNaN(betCount) || betCount <= 0) {
        showAdminStatus('Please select a market, outcome, and valid number of bets', 'error');
        return;
    }
    
    // Get betting state
    if (typeof bettingState === 'undefined') {
        showAdminStatus('Betting system not initialized', 'error');
        return;
    }
    
    // Initialize market in betting state if it doesn't exist
    if (!bettingState.markets[marketId]) {
        bettingState.markets[marketId] = {
            outcomes: {},
            bets: []
        };
    }
    
    // Initialize outcome in market if it doesn't exist
    if (!bettingState.markets[marketId].outcomes[outcome]) {
        bettingState.markets[marketId].outcomes[outcome] = {
            bettors: [],
            totalBets: 0
        };
    }
    
    // Generate fake users and bets
    const users = JSON.parse(localStorage.getItem('polypredict_users') || '[]');
    const fakeUsers = [];
    
    // Track generated bets for this market
    if (!adminToolsState.autoGeneratedBets[marketId]) {
        adminToolsState.autoGeneratedBets[marketId] = {
            totalBets: 0,
            outcomes: {}
        };
    }
    
    if (!adminToolsState.autoGeneratedBets[marketId].outcomes[outcome]) {
        adminToolsState.autoGeneratedBets[marketId].outcomes[outcome] = 0;
    }
    
    // Generate fake users
    for (let i = 0; i < betCount; i++) {
        const userId = 'fake-' + Date.now() + '-' + i;
        const fakeUser = {
            id: userId,
            email: `user${Math.floor(Math.random() * 10000)}@example.com`,
            tokenBalance: 1, // Just enough for one bet
            isBot: true
        };
        
        fakeUsers.push(fakeUser);
    }
    
    // Create bets for each fake user
    fakeUsers.forEach(user => {
        // Create the bet
        const bet = {
            id: Date.now().toString() + '-' + user.id,
            userId: user.id,
            userEmail: user.email,
            marketId,
            outcome,
            amount: bettingState.betAmount,
            odds: 1.8,
            timestamp: new Date().toISOString(),
            status: 'active',
            isBot: true
        };
        
        // Add bet to market
        bettingState.markets[marketId].bets.push(bet);
        bettingState.markets[marketId].outcomes[outcome].bettors.push(user.id);
        bettingState.markets[marketId].outcomes[outcome].totalBets += bettingState.betAmount;
        
        // Update admin tools state
        adminToolsState.autoGeneratedBets[marketId].totalBets++;
        adminToolsState.autoGeneratedBets[marketId].outcomes[outcome]++;
    });
    
    // Save betting state
    localStorage.setItem('polypredict_betting_state', JSON.stringify(bettingState));
    
    // Update UI
    updateBettingUI(marketId);
    
    // Show success message
    showAdminStatus(`Successfully generated ${betCount} bets on "${outcome}"`, 'success');
    
    // Activate any pending bets
    activatePendingBets(marketId);
}

// Resolve market secretly
function resolveMarketSecretly() {
    const marketId = document.getElementById('admin-market-selector').value;
    const winningOutcome = document.getElementById('admin-winning-selector').value;
    
    if (!marketId || !winningOutcome) {
        showAdminStatus('Please select a market and winning outcome', 'error');
        return;
    }
    
    // Get betting state
    if (typeof bettingState === 'undefined' || !bettingState.markets[marketId]) {
        showAdminStatus('Market not found in betting system', 'error');
        return;
    }
    
    // Call the resolve market function
    const result = resolveMarket(marketId, winningOutcome);
    
    if (result) {
        // Update market card to show resolved status
        const marketCards = document.querySelectorAll('.market-card');
        const marketCard = marketCards[marketId - 1];
        
        if (marketCard) {
            const marketFooter = marketCard.querySelector('.market-footer');
            const statusSpan = marketFooter.querySelector('.market-status');
            
            statusSpan.textContent = 'Resolved';
            statusSpan.className = 'market-status status-resolved';
            
            // Disable bet buttons
            const betButtons = marketCard.querySelectorAll('.bet-btn');
            betButtons.forEach(btn => {
                btn.disabled = true;
                btn.textContent = 'Market Resolved';
                btn.style.backgroundColor = '#cbd5e0';
                btn.style.cursor = 'not-allowed';
            });
            
            // Highlight winning outcome
            const outcomes = marketCard.querySelectorAll('.outcome');
            outcomes.forEach(outcome => {
                const outcomeName = outcome.querySelector('.outcome-name').textContent.split('(')[0].trim();
                
                if (outcomeName === winningOutcome) {
                    outcome.style.backgroundColor = '#c6f6d5';
                    outcome.style.borderColor = '#38a169';
                    
                    // Add winner indicator
                    let winnerIndicator = outcome.querySelector('.winner-indicator');
                    if (!winnerIndicator) {
                        winnerIndicator = document.createElement('span');
                        winnerIndicator.className = 'winner-indicator';
                        winnerIndicator.textContent = 'Winner';
                        winnerIndicator.style.backgroundColor = '#38a169';
                        winnerIndicator.style.color = 'white';
                        winnerIndicator.style.padding = '2px 6px';
                        winnerIndicator.style.borderRadius = '10px';
                        winnerIndicator.style.fontSize = '0.7rem';
                        winnerIndicator.style.marginLeft = '10px';
                        outcome.querySelector('.outcome-name').appendChild(winnerIndicator);
                    }
                }
            });
        }
        
        showAdminStatus(`Successfully resolved market with winning outcome: ${winningOutcome}`, 'success');
    } else {
        showAdminStatus('Failed to resolve market', 'error');
    }
}

// Show admin status message
function showAdminStatus(message, type) {
    const statusSection = document.getElementById('admin-status-section');
    if (!statusSection) return;
    
    statusSection.textContent = message;
    statusSection.style.display = 'block';
    
    if (type === 'error') {
        statusSection.style.backgroundColor = '#fed7d7';
        statusSection.style.color = '#c53030';
    } else {
        statusSection.style.backgroundColor = '#c6f6d5';
        statusSection.style.color = '#2f855a';
    }
    
    // Hide after 5 seconds
    setTimeout(() => {
        statusSection.style.display = 'none';
    }, 5000);
}

// Add secret market controls to dashboard
function addSecretMarketControls() {
    // This function is called when on the dashboard page
    // The controls are added when the secret admin mode is toggled on
}

// Add admin page tools
function addAdminPageTools(panel) {
    // Add section title
    const sectionTitle = document.createElement('h4');
    sectionTitle.textContent = 'Admin Page Tools';
    sectionTitle.style.marginTop = '0';
    panel.appendChild(sectionTitle);
    
    // Add content
    const content = document.createElement('p');
    content.textContent = 'Additional admin tools will appear here.';
    panel.appendChild(content);
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    // Delay initialization to ensure betting.js is loaded first
    setTimeout(initAdminTools, 500);
});
